#!/bin/bash 

echo 'Creating folders, config files, installing Webpack and dependencies'
touch webpack.config.js
touch server.js
mkdir src dist
npm init -y
npm install  --save-dev webpack-cli style-loader css-loader html-webpack-plugin webpack-dev-server express webpack-dev-middleware
echo "
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  mode: 'development',
  entry: './src/index.js',
  devtool: 'inline-source-map',
  devServer: {
    static: './dist',
  },
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.(ttf)$/i,
        type: 'asset/resource',
      },
      {
        test: /\.(png|jpg|jpeg)$/i,
        type: 'asset/resource',
      },
      { 
        test: /\.svg$/i, 
        loader: 'svg-inline-loader'
      },
      {
        test: /\.(woff|woff2|eot|ttf|otf)$/i,
        type: 'asset/resource',
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './src/index.html',
    }),
  ],
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
    clean: true,
    publicPath: '/',
  },
};" >> webpack.config.js
echo "const express = require('express');
const webpack = require('webpack');
const webpackDevMiddleware = require('webpack-dev-middleware');

const app = express();
const config = require('./webpack.config.js');
const compiler = webpack(config);

// Tell express to use the webpack-dev-middleware and use the webpack.config.js
// configuration file as a base.
app.use(
  webpackDevMiddleware(compiler, {
    publicPath: config.output.publicPath,

  })
);

// Serve the files on port 3000.
app.listen(3000, function () {
  console.log('Server app listening on port 3000!\n');
});
" >> server.js

cd src
mkdir img font 
echo 'Add this to package.json: 
"watch": "webpack --watch",
    "start": "webpack serve --open",
    "server": "node server.js",
    "build": "webpack" ',